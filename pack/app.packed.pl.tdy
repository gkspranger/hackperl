
# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
    my %fatpacked;

    $fatpacked{"CMD/Colors.pm"} =
      '#line ' . ( 1 + __LINE__ ) . ' "' . __FILE__ . "\"\n" . <<'CMD_COLORS';
  package CMD::Colors;
  
  =head1 NAME
  
  CMD::Colors - Generate Colorfull text on commandline
  
  =head1 SYNOPSIS
  
      use CMD::Colors;
  
      ##### Example Usage ##### 
      
      ## Prints text with 'RED' color & default background
      Cprint('hello, This is RED text', 'red');                   
  
      ## Prints text with 'RED' color & 'white' background 
      Cprint('hello, This is RED text', 'red', 'white');    
  
      ## Prints text with 'RED' color & 'default' background & BOLD text
      Cprint('hello, This is RED text', 'red', 'default', 'bold'); 
  
      ## Prints text with 'RED' color & 'default' background & 'half_bright' text
      Cprint('hello, This is RED text', 'red', undef, 'half_bright');
  
  
      ##### Show all available 'foreground' & 'background' colors - DEMO #####
      foreach my $color (keys %{$COLOR_CODES{'foreground'}}) {
       Cprint("This is $color text", $color);
       print "\n";
       foreach my $bgcolor(keys %{$COLOR_CODES{'background'}}) {
          Cprint("This is $color text with $bgcolor background", $color, $bgcolor);
          print "\n";
        }
       }
  
  
  =head1 DESCRIPTION
  
  This module provides functions for generating colorfull text on commandline with perl
  programs.  It can be used to make PERL "CMD" programs more interesting.
  
  *Cprint() function be used for all "print" calls.
  
  Syntax -
  Cprint("TEXT TO BE Printed", "ForegroundCOLORName", "BackgroundColorName", "TEXT Property");
  
  
  Supported Colors ::
  Foreground   - black, red, green, brown, blue, magenta, cyan, white
  Background   - black, red, green, brown, blue, magenta, cyan, white
  
  
  Supported Properties ::
          'bold'                 ## Set bold                                                                       
          'half_bright'          ## Set  half-bright (simulated with color on a color display)                     
          'underscore'           ## Set underscore (simulated with color on a color  display)                      
                                 ## (the  colors  used  to  simulate dim or underline are set                      
          'blink'                ## Set blink                                                                      
          'reverse_video'        ## Set reverse video                                                              
          'reset_mapping'        ## Reset selected mapping, display control flag, and  toggle                      
                                 ## meta flag (ECMA-48 says "primary font").                                       
          'null_mapping'         ## Select null mapping, set display control flag, reset                           
                                 ## toggle meta flag (ECMA-48 says "first alternate font").                        
          'null-mapping '        ## Select null mapping, set display control flag, set toggle                      
                                 ## meta  flag  (ECMA-48  says "second alternate font").  The                      
                                 ## toggle meta flag causes the high bit of a byte to be                           
                                 ## toggled before the mapping table translation is done.                          
          'nd_intensity'         ## Set normal intensity (ECMA-48 says "doubly underlined")                        
          'n_intensity'          ## Set normal intensity                                                           
          'underline_off'        ## Set underline off                                                              
          'blink_off'            ## Set blink off                                                                  
          'reverse_video_off'    ## Set reverse video off                                                          
          'default'              ## Set default        
  
  
  ** If color/property specified is not supported, default color/property would be used for printing text **
  
  Techinal Details:: 
  This module uses "Linux" console escape and control sequences for generating colorfull text 
  with background colors, It utilizes the "ECMA-48 SGR" sequenceof the SHELL to generate colored text.
  
  
  =head1 AUTHOR
         Utsav Handa <handautsav@hotmail.com>
           
           
  =head1 COPYRIGHT
         (c) 2009 Utsav Handa. 
  
          
         All rights reserved.  This program is free software; you can redistribute it 
         and/or modify it under the same terms as Perl itself.
  
             
            
  =cut
  
  
  use strict;
  use Exporter;
  
  our $VERSION   = '0.1';
  our @ISA       = qw/ Exporter /;
  our @EXPORT    = qw(Cprint %COLOR_CODES);
  
  
  
  #########################
  #### Color Code Hash ####
  #########################
  our %COLOR_CODES = (
      'foreground' => {
  	'black'                => 30,     ## Set black foreground
  	'red'                  => 31,     ## Set red foreground
  	'green'                => 32,     ## Set green foreground
  	'brown'                => 33,     ## Set brown foreground
  	'blue'                 => 34,     ## Set blue foreground
  	'magenta'              => 35,     ## Set magenta foreground
  	'cyan'                 => 36,     ## Set cyan foreground
  	'white'                => 37,     ## Set white foreground
  	'default'              => 49,     ## Set default background color
      },
      'background' => {
  	'black'                => 40,     ## Set black background
  	'red'                  => 41,     ## Set red background
  	'green'                => 42,     ## Set green background
  	'brown'                => 43,     ## Set brown background
  	'blue'                 => 44,     ## Set blue background
  	'magenta'              => 45,     ## Set magenta background
  	'cyan'                 => 46,     ## Set cyan background
  	'white'                => 47,     ## Set white background
  	'default'              => 49,     ## Set default background color
      },
      'other'      => {
  	'bold'                 => ';1',    ## Set bold
  	'half_bright'          => ';2',    ## Set  half-bright (simulated with color on a color display)
  	'underscore'           => ';4',    ## Set underscore (simulated with color on a color  display)
  	                                   ## (the  colors  used  to  simulate dim or underline are set
  	'blink'                => ';5',    ## Set blink
  	'reverse_video'        => ';7',    ## Set reverse video
  	'reset_mapping'        => ';10',   ## Reset selected mapping, display control flag, and  toggle
  	                                   ## meta flag (ECMA-48 says "primary font").
  	'null_mapping'         => ';11',   ## Select null mapping, set display control flag, reset 
                                             ## toggle meta flag (ECMA-48 says "first alternate font").
  	'null-mapping '        => ';12',   ## Select null mapping, set display control flag, set toggle
  	                                   ## meta  flag  (ECMA-48  says "second alternate font").  The
  	                                   ## toggle meta flag causes the high bit of a byte to be 
  	                                   ## toggled before the mapping table translation is done.
  	'nd_intensity'         => ';21',   ## Set normal intensity (ECMA-48 says "doubly underlined")
  	'n_intensity'          => ';22',   ## Set normal intensity
  	'underline_off'        => ';24',   ## Set underline off
  	'blink_off'            => ';25',   ## Set blink off
  	'reverse_video_off'    => ';27',   ## Set reverse video off	     
  	'default'              => '',      ## Set default
      }
  
      );
  
  
  sub Cprint {
      ## This sub-routine actually makes call to 'print' statemtn with ESC characters
      ## and prepares statemtn for printing specified text
      my ($text, $foreground_color, $background_color, $other_color, $garb) = @_;
  
      ## Default Variable(s)
      $foreground_color = 'default' if (!$foreground_color);
      $background_color = 'default' if (!$background_color);
      $other_color      = ( $other_color ? getCodeForColor($other_color, 'other') : '' );
  
      ## Building string to print
      my $string  = "\033[";
      $string    .= getCodeForColor($foreground_color, 'foreground').';'.getCodeForColor($background_color, 'background');
      $string    .= $other_color."m".$text."\033[0m";
  
      return print $string;
  }
  
  
  sub getCodeForColor {
      ## This sub-routine returns actualt ESC Code for property and color specified
      my ($color, $type, $garb) = @_;
  
      ## Default Type
      $type  = 'foreground' if (!$type);
  
      ## Sanitize Arguments
      $color = lc $color;
      $type  = lc $type;
  
  
      return ( $COLOR_CODES{$type}{$color} ? $COLOR_CODES{$type}{$color} : $COLOR_CODES{$type}{'default'} );
  }
  
  
  
  
  
CMD_COLORS

    $fatpacked{"Modern/Perl.pm"} =
      '#line ' . ( 1 + __LINE__ ) . ' "' . __FILE__ . "\"\n" . <<'MODERN_PERL';
  package Modern::Perl;
  # ABSTRACT: enable all of the features of Modern Perl with one import
  $Modern::Perl::VERSION = '1.20230106';
  use 5.010_000;
  
  use strict;
  use warnings;
  
  use mro     ();
  use feature ();
  
  # enable methods on filehandles; unnecessary when 5.14 autoloads them
  use IO::File   ();
  use IO::Handle ();
  
  my $wanted_date;
  
  sub VERSION {
      my ($self, $version) = @_;
  
      my $default = 2023;
  
      return $Modern::Perl::VERSION || $default unless defined $version;
      return $Modern::Perl::VERSION || $default if             $version < 2009;
  
      $wanted_date = $version if (caller(1))[3] =~ /::BEGIN/;
      return $default;
  }
  
  sub import {
      my ($class, $date) = @_;
      $date = $wanted_date unless defined $date;
  
      my $feature_tag    = validate_date( $date );
      undef $wanted_date;
  
      warnings->import;
      strict->import;
      feature->unimport( ':all' );
      feature->import( $feature_tag );
  
      if ($feature_tag ge ':5.34') {
          feature->import( 'signatures' );
          warnings->unimport( 'experimental::signatures' );
      }
  
      mro::set_mro( scalar caller(), 'c3' );
  }
  
  sub unimport {
      warnings->unimport;
      strict->unimport;
      feature->unimport;
  }
  
  sub validate_date {
      my %dates = (
          2009 => ':5.10',
          2010 => ':5.10',
          2011 => ':5.12',
          2012 => ':5.14',
          2013 => ':5.16',
          2014 => ':5.18',
          2015 => ':5.20',
          2016 => ':5.24',
          2017 => ':5.24',
          2018 => ':5.26',
          2019 => ':5.28',
          2020 => ':5.30',
          2021 => ':5.32',
          2022 => ':5.34',
          2023 => ':5.36',
      );
  
      my $date = shift;
  
      # always enable unicode_strings when available
      unless ($date) {
          return ':5.12' if $] > 5.011003;
          return ':5.10';
      }
  
      my $year = substr $date, 0, 4;
      return $dates{$year} if exists $dates{$year};
  
      die "Unknown date '$date' requested\n";
  }
  
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  Modern::Perl - enable all of the features of Modern Perl with one import
  
  =head1 VERSION
  
  version 1.20230106
  
  =head1 SYNOPSIS
  
  Modern Perl programs use several modules to enable additional features of Perl
  and of the CPAN.  Instead of copying and pasting all of these C<use> lines,
  instead write only one:
  
      use Modern::Perl;
  
  This enables the L<strict> and L<warnings> pragmas, as well as all of the
  features available in Perl 5.10. It also enables C3 method resolution order as
  documented in C<perldoc mro> and loads L<IO::File> and L<IO::Handle> so that
  you may call methods on filehandles. In the future, it may include additional
  core modules and pragmas (but is unlikely to include non-core features).
  
  Because so much of this module's behavior uses lexically scoped pragmas, you
  may disable these pragmas within an inner scope with:
  
      no Modern::Perl;
  
  See L<http://www.modernperlbooks.com/mt/2009/01/toward-a-modernperl.html> for
  more information, L<http://www.modernperlbooks.com/> for further discussion of
  Modern Perl and its implications, and
  L<http://onyxneon.com/books/modern_perl/index.html> for a freely-downloadable
  Modern Perl tutorial.
  
  =head2 CLI Usage
  
  As of Modern::Perl 2019, you may also enable this pragma from the command line:
  
      $ perl -Modern::Perl -e 'say "Take that, awk!"'
  
  You may also enable year-specific features:
  
      $ perl -Modern::Perl=2020 -e 'say "Looking forward to Perl 5.30!"'
  
  =head2 Wrapping Modern::Perl
  
  If you want to wrap Modern::Perl in your own C<import()> method, you can do so
  to add additional pragmas or features, such as the use of L<Try::Tiny>. Please
  note that, if you do so, you will I<not> automatically enable C3 method
  resolution in the calling scope. This is due to how the L<mro> pragma works. In
  your custom C<import()> method, you will need to write code such as:
  
      mro::set_mro( scalar caller(), 'c3' );
  
  =head2 Forward Compatibility
  
  For forward compatibility, I recommend you specify a string containing a
  I<year> value as the single optional import tag. For example:
  
      use Modern::Perl '2009';
      use Modern::Perl '2010';
  
  ... both enable 5.10 features, while:
  
      use Modern::Perl '2011';
  
  ... enables 5.12 features:
  
      use Modern::Perl '2012';
  
  ... enables 5.14 features:
  
      use Modern::Perl '2013';
  
  ... enables 5.16 features, and:
  
      use Modern::Perl '2014';
  
  ... enables 5.18 features, and:
  
      use Modern::Perl '2015';
  
  ... enables 5.20 features, and:
  
      use Modern::Perl '2016';
  
  ... enables 5.24 features, and:
  
      use Modern::Perl '2017';
  
  ... enables 5.24 features, and:
  
      use Modern::Perl '2018';
  
  ... enables 5.26 features.
  
      use Modern::Perl '2019';
  
  ... enables 5.28 features.
  
      use Modern::Perl '2020';
  
  ... enables 5.30 features.
  
      use Modern::Perl '2021';
  
  ... enables 5.32 features.
  
      use Modern::Perl '2022';
  
  ... enables 5.34 features.
  
      use Modern::Perl '2023';
  
  ... enables 5.36 features.
  
  Obviously you cannot use newer features on earlier
  versions. Perl will throw the appropriate exception if you try.
  
  =head1 AUTHOR
  
  chromatic, C<< <chromatic at wgz.org> >>
  
  =head1 BUGS
  
  None known.
  
  Please report any bugs or feature requests to C<bug-modern-perl at
  rt.cpan.org>, or through the web interface at
  L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Modern-Perl>.  I will be
  notified, and then you'll automatically be notified of progress on your bug as
  I make changes.
  
  =head1 SUPPORT
  
  You can find documentation for this module with the perldoc command.
  
      perldoc Modern::Perl
  
  You can also look for information at:
  
  =over 4
  
  =item * RT: CPAN's request tracker
  
  L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Modern-Perl>
  
  =item * AnnoCPAN: Annotated CPAN documentation
  
  L<http://annocpan.org/dist/Modern-Perl>
  
  =item * CPAN Ratings
  
  L<http://cpanratings.perl.org/d/Modern-Perl>
  
  =item * Search CPAN
  
  L<http://search.cpan.org/dist/Modern-Perl/>
  
  =back
  
  =head1 ACKNOWLEDGEMENTS
  
  Damian Conway (inspiration from L<Toolkit>), Florian Ragwitz
  (L<B::Hooks::Parser>, so I didn't have to write it myself), chocolateboy (for
  suggesting that I don't even need L<B::Hooks::Parser>), Damien Learns Perl,
  David Moreno, Evan Carroll, Elliot Shank, Andreas König, Father Chrysostomos,
  Gryphon Shafer, and Norbert E. Grüner for reporting bugs, filing patches, and
  requesting features.
  
  =head1 AUTHOR
  
  chromatic
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2018 by chromatic@wgz.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
MODERN_PERL

    $fatpacked{"odern/Perl.pm"} =
      '#line ' . ( 1 + __LINE__ ) . ' "' . __FILE__ . "\"\n" . <<'ODERN_PERL';
  package odern::Perl;
  #ABSTRACT: Module for enabling all of the features of Modern Perl
  $odern::Perl::VERSION = '1.20230106';
  use Modern::Perl;
  
  *import = \&Modern::Perl::import;
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  odern::Perl - Module for enabling all of the features of Modern Perl
  
  =head1 VERSION
  
  version 1.20230106
  
  =head1 AUTHOR
  
  chromatic
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2018 by chromatic@wgz.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
ODERN_PERL

    $fatpacked{"perl5/App/FatPacker.pm"} =
        '#line '
      . ( 1 + __LINE__ ) . ' "'
      . __FILE__ . "\"\n"
      . <<'PERL5_APP_FATPACKER';
  package App::FatPacker;
  
  use strict;
  use warnings FATAL => 'all';
  use 5.008001;
  use Getopt::Long;
  use Cwd qw(cwd);
  use File::Find qw(find);
  use File::Spec::Functions qw(
    catdir splitpath splitdir catpath rel2abs abs2rel
  );
  use File::Spec::Unix;
  use File::Copy qw(copy);
  use File::Path qw(mkpath rmtree);
  use B qw(perlstring);
  
  our $VERSION = '0.010008'; # v0.10.8
  
  $VERSION = eval $VERSION;
  
  sub call_parser {
    my $self = shift;
    my ($args, $options) = @_;
  
    local *ARGV = [ @{$args} ];
    $self->{option_parser}->getoptions(@$options);
  
    return [ @ARGV ];
  }
  
  sub lines_of {
    map +(chomp,$_)[1], do { local @ARGV = ($_[0]); <> };
  }
  
  sub stripspace {
    my ($text) = @_;
    $text =~ /^(\s+)/ && $text =~ s/^$1//mg;
    $text;
  }
  
  sub import {
    $_[1] && $_[1] eq '-run_script'
      and return shift->new->run_script;
  }
  
  sub new {
    bless {
      option_parser => Getopt::Long::Parser->new(
        config => [ qw(require_order pass_through bundling no_auto_abbrev) ]
      ),
    }, $_[0];
  }
  
  sub run_script {
    my ($self, $args) = @_;
    my @args = $args ? @$args : @ARGV;
    (my $cmd = shift @args || 'help') =~ s/-/_/g;
  
    if (my $meth = $self->can("script_command_${cmd}")) {
      $self->$meth(\@args);
    } else {
      die "No such command ${cmd}";
    }
  }
  
  sub script_command_help {
    print "Try `perldoc fatpack` for how to use me\n";
  }
  
  sub script_command_pack {
    my ($self, $args) = @_;
  
    my @modules = split /\r?\n/, $self->trace(args => $args);
    my @packlists = $self->packlists_containing(\@modules);
  
    my $base = catdir(cwd, 'fatlib');
    $self->packlists_to_tree($base, \@packlists);
  
    my $file = shift @$args;
    print $self->fatpack_file($file);
  }
  
  sub script_command_trace {
    my ($self, $args) = @_;
  
    $args = $self->call_parser($args => [
      'to=s' => \my $file,
      'to-stderr' => \my $to_stderr,
      'use=s' => \my @additional_use
    ]);
  
    die "Can't use to and to-stderr on same call" if $file && $to_stderr;
  
    $file ||= 'fatpacker.trace';
  
    if (!$to_stderr and -e $file) {
      unlink $file or die "Couldn't remove old trace file: $!";
    }
    my $arg = do {
      if ($to_stderr) {
        ">&STDERR"
      } elsif ($file) {
        ">>${file}"
      }
    };
  
    $self->trace(
      use => \@additional_use,
      args => $args,
      output => $arg,
    );
  }
  
  sub trace {
    my ($self, %opts) = @_;
  
    my $output = $opts{output};
    my $trace_opts = join ',', $output||'>&STDOUT', @{$opts{use}||[]};
  
    local $ENV{PERL5OPT} = join ' ',
      ($ENV{PERL5OPT}||()), '-MApp::FatPacker::Trace='.$trace_opts;
  
    my @args = @{$opts{args}||[]};
  
    if ($output) {
      # user specified output target, JFDI
      system $^X, @args;
      return;
    } else {
      # no output target specified, slurp
      open my $out_fh, "$^X @args |";
      return do { local $/; <$out_fh> };
    }
  }
  
  sub script_command_packlists_for {
    my ($self, $args) = @_;
    foreach my $pl ($self->packlists_containing($args)) {
      print "${pl}\n";
    }
  }
  
  sub packlists_containing {
    my ($self, $targets) = @_;
    my @targets;
    {
      local @INC = ('lib', @INC);
      foreach my $t (@$targets) {
        unless (eval { require $t; 1}) {
          warn "Failed to load ${t}: $@\n"
              ."Make sure you're not missing a packlist as a result\n";
          next;
        }
        push @targets, $t;
      }
    }
    my @search = grep -d $_, map catdir($_, 'auto'), @INC;
    my %pack_rev;
    find({
      no_chdir => 1,
      wanted => sub {
        return unless /[\\\/]\.packlist$/ && -f $_;
        $pack_rev{$_} = $File::Find::name for lines_of $File::Find::name;
      },
    }, @search);
    my %found; @found{map +($pack_rev{Cwd::abs_path($INC{$_})}||()), @targets} = ();
    sort keys %found;
  }
  
  sub script_command_tree {
    my ($self, $args) = @_;
    my $base = catdir(cwd,'fatlib');
    $self->packlists_to_tree($base, $args);
  }
  
  sub packlists_to_tree {
    my ($self, $where, $packlists) = @_;
    rmtree $where;
    mkpath $where;
    foreach my $pl (@$packlists) {
      my ($vol, $dirs, $file) = splitpath $pl;
      my @dir_parts = splitdir $dirs;
      my $pack_base;
      PART: foreach my $p (0 .. $#dir_parts) {
        if ($dir_parts[$p] eq 'auto') {
          # $p-2 normally since it's <wanted path>/$Config{archname}/auto but
          # if the last bit is a number it's $Config{archname}/$version/auto
          # so use $p-3 in that case
          my $version_lib = 0+!!($dir_parts[$p-1] =~ /^[0-9.]+$/);
          $pack_base = catpath $vol, catdir @dir_parts[0..$p-(2+$version_lib)];
          last PART;
        }
      }
      die "Couldn't figure out base path of packlist ${pl}" unless $pack_base;
      foreach my $source (lines_of $pl) {
        # there is presumably a better way to do "is this under this base?"
        # but if so, it's not obvious to me in File::Spec
        next unless substr($source,0,length $pack_base) eq $pack_base;
        my $target = rel2abs( abs2rel($source, $pack_base), $where );
        my $target_dir = catpath((splitpath $target)[0,1]);
        mkpath $target_dir;
        copy $source => $target;
      }
    }
  }
  
  sub script_command_file {
    my ($self, $args) = @_;
    my $file = shift @$args;
    print $self->fatpack_file($file);
  }
  
  sub fatpack_file {
    my ($self, $file) = @_;
  
    my $shebang = "";
    my $script = "";
    if ( defined $file and -r $file ) {
      ($shebang, $script) = $self->load_main_script($file);
    }
  
    my @dirs = $self->collect_dirs();
    my %files;
    $self->collect_files($_, \%files) for @dirs;
  
    return join "\n", $shebang, $self->fatpack_code(\%files), $script;
  }
  
  # This method can be overload in sub classes
  # For example to skip POD
  sub load_file {
    my ($self, $file) = @_;
    my $content = do {
      local (@ARGV, $/) = ($file);
      <>
    };
    close ARGV;
    return $content;
  }
  
  sub collect_dirs {
    my ($self) = @_;
    my $cwd = cwd;
    return grep -d, map rel2abs($_, $cwd), ('lib','fatlib');
  }
  
  sub collect_files {
    my ($self, $dir, $files) = @_;
    find(sub {
      return unless -f $_;
      !/\.pm$/ and warn "File ${File::Find::name} isn't a .pm file - can't pack this -- if you hoped we were going to, things may not be what you expected later\n" and return;
      $files->{File::Spec::Unix->abs2rel($File::Find::name,$dir)} =
        $self->load_file($File::Find::name);
    }, $dir);
  }
  
  sub load_main_script {
    my ($self, $file) = @_;
    open my $fh, "<", $file or die("Can't read $file: $!");
    my $shebang = <$fh>;
    my $script = join "", <$fh>;
    close $fh;
    unless ( index($shebang, '#!') == 0 ) {
      $script = $shebang . $script;
      $shebang = "";
    }
    return ($shebang, $script);
  }
  
  sub fatpack_start {
    return stripspace <<'  END_START';
      # This chunk of stuff was generated by App::FatPacker. To find the original
      # file's code, look for the end of this BEGIN block or the string 'FATPACK'
      BEGIN {
      my %fatpacked;
    END_START
  }
  
  sub fatpack_end {
    return stripspace <<'  END_END';
      s/^  //mg for values %fatpacked;
  
      my $class = 'FatPacked::'.(0+\%fatpacked);
      no strict 'refs';
      *{"${class}::files"} = sub { keys %{$_[0]} };
  
      if ($] < 5.008) {
        *{"${class}::INC"} = sub {
          if (my $fat = $_[0]{$_[1]}) {
            my $pos = 0;
            my $last = length $fat;
            return (sub {
              return 0 if $pos == $last;
              my $next = (1 + index $fat, "\n", $pos) || $last;
              $_ .= substr $fat, $pos, $next - $pos;
              $pos = $next;
              return 1;
            });
          }
        };
      }
  
      else {
        *{"${class}::INC"} = sub {
          if (my $fat = $_[0]{$_[1]}) {
            open my $fh, '<', \$fat
              or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
            return $fh;
          }
          return;
        };
      }
  
      unshift @INC, bless \%fatpacked, $class;
    } # END OF FATPACK CODE
    END_END
  }
  
  sub fatpack_code {
    my ($self, $files) = @_;
    my @segments = map {
      (my $stub = $_) =~ s/\.pm$//;
      my $name = uc join '_', split '/', $stub;
      my $data = $files->{$_}; $data =~ s/^/  /mg; $data =~ s/(?<!\n)\z/\n/;
      '$fatpacked{'.perlstring($_).qq!} = '#line '.(1+__LINE__).' "'.__FILE__."\\"\\n".<<'${name}';\n!
      .qq!${data}${name}\n!;
    } sort keys %$files;
  
    return join "\n", $self->fatpack_start, @segments, $self->fatpack_end;
  }
  
  =encoding UTF-8
  
  =head1 NAME
  
  App::FatPacker - pack your dependencies onto your script file
  
  =head1 SYNOPSIS
  
    $ fatpack pack myscript.pl >myscript.packed.pl
  
  Or, with more step-by-step control:
  
    $ fatpack trace myscript.pl
    $ fatpack packlists-for `cat fatpacker.trace` >packlists
    $ fatpack tree `cat packlists`
    $ fatpack file myscript.pl >myscript.packed.pl
  
  Each command is designed to be simple and self-contained so that you can modify
  the input/output of each step as needed. See the documentation for the
  L<fatpack> script itself for more information.
  
  The programmatic API for this code is not yet fully decided, hence the 0.x
  release version. Expect that to be cleaned up for 1.0.
  
  =head1 CAVEATS
  
  As dependency module code is copied into the resulting file as text, only
  pure-perl dependencies can be packed, not compiled XS code.
  
  The currently-installed dependencies to pack are found via F<.packlist> files,
  which are generally only included in non-core distributions that were installed
  by a CPAN installer. This is a feature; see L<fatpack/packlists-for> for
  details. (a notable exception to this is FreeBSD, which, since its packaging
  system is designed to work equivalently to a source install, does preserve
  the packlist files)
  
  =head1 SEE ALSO
  
  L<article for Perl Advent 2012|http://www.perladvent.org/2012/2012-12-14.html>
  
  L<pp> - PAR Packager, a much more complex architecture-dependent packer that
  can pack compiled code and even a Perl interpreter
  
  =head1 SUPPORT
  
  Bugs may be submitted through L<the RT bug tracker|https://rt.cpan.org/Public/Dist/Display.html?Name=App-FatPacker>
  (or L<bug-App-FatPacker@rt.cpan.org|mailto:bug-App-FatPacker@rt.cpan.org>).
  
  You can normally also obtain assistance on irc, in #toolchain on irc.perl.org.
  
  =head1 AUTHOR
  
  Matt S. Trout (mst) <mst@shadowcat.co.uk>
  
  =head2 CONTRIBUTORS
  
  miyagawa - Tatsuhiko Miyagawa (cpan:MIYAGAWA) <miyagawa@bulknews.net>
  
  tokuhirom - MATSUNO★Tokuhiro (cpan:TOKUHIROM) <tokuhirom@gmail.com>
  
  dg - David Leadbeater (cpan:DGL) <dgl@dgl.cx>
  
  gugod - 劉康民 (cpan:GUGOD) <gugod@cpan.org>
  
  t0m - Tomas Doran (cpan:BOBTFISH) <bobtfish@bobtfish.net>
  
  sawyer - Sawyer X (cpan:XSAWYERX) <xsawyerx@cpan.org>
  
  ether - Karen Etheridge (cpan:ETHER) <ether@cpan.org>
  
  Mithaldu - Christian Walde (cpan:MITHALDU) <walde.christian@googlemail.com>
  
  dolmen - Olivier Mengué (cpan:DOLMEN) <dolmen@cpan.org>
  
  djerius - Diab Jerius (cpan:DJERIUS) <djerius@cpan.org>
  
  haarg - Graham Knop (cpan:HAARG) <haarg@haarg.org>
  
  grinnz - Dan Book (cpan:DBOOK) <dbook@cpan.org>
  
  Many more people are probably owed thanks for ideas. Yet
  another doc nit to fix.
  
  =head1 COPYRIGHT
  
  Copyright (c) 2010 the App::FatPacker L</AUTHOR> and L</CONTRIBUTORS>
  as listed above.
  
  =head1 LICENSE
  
  This library is free software and may be distributed under the same terms
  as perl itself.
  
  =cut
  
  1;
  
PERL5_APP_FATPACKER

    $fatpacked{"perl5/App/FatPacker/Trace.pm"} =
        '#line '
      . ( 1 + __LINE__ ) . ' "'
      . __FILE__ . "\"\n"
      . <<'PERL5_APP_FATPACKER_TRACE';
  package App::FatPacker::Trace;
  
  use strict;
  use warnings FATAL => 'all';
  use B ();
  
  my $trace_file;
  my %initial_inc;
  
  sub import {
    my (undef, $file, @extras) = @_;
  
    $trace_file = $file || '>>fatpacker.trace';
    # For filtering out our own deps later.
    # (Not strictly required as these are core only and won't have packlists, but 
    # looks neater.)
    %initial_inc = %INC;
  
    # Use any extra modules specified
    eval "use $_" for @extras;
  
    B::minus_c;
  }
  
  CHECK {
    return unless $trace_file; # not imported
  
    open my $trace, $trace_file
        or die "Couldn't open $trace_file to trace to: $!";
  
    for my $inc (keys %INC) {
      next if exists $initial_inc{$inc};
      next unless defined($INC{$inc}) and $INC{$inc} =~ /\Q${inc}\E\Z/;
      print $trace "$inc\n";
    }
  }
  
  1;
  
  __END__
  
  =head1 NAME
  
  App::FatPacker::Trace - Tracing module usage using compilation checking
  
  =head1 SYNOPSIS
  
      # open STDERR for writing
      # will be like: open my $fh, '>', '&STDERR'...
      perl -MApp::FatPacker::Trace=>&STDERR myscript.pl
  
      # open a file for writing
      # will be like: open my $fh, '>>', 'fatpacker.trace'
      perl -MApp::FatPacker::Trace=>>fatpacker.trace myscript.pl
  
  =head1 DESCRIPTION
  
  This module allows tracing the modules being used by your code. It does that
  using clever trickery using the C<import> method, the C<CHECK> block and
  L<B>'s C<minus_c> function.
  
  When App::FatPacker::Trace is being used, the import() method will call
  C<B::minus_c> in order to set up the global compilation-only flag perl
  (the interpreter) has. This will prevent any other code from being run.
  
  Then in the C<CHECK> block which is reached at the end of the compilation
  phase (see L<perlmod>), it will gather all modules that have been loaded,
  using C<%INC>, and will write it to a file or to STDERR, determined by
  parameters sent to the C<import> method.
  
  =head1 METHODS
  
  =head2 import
  
  This method gets run when you just load L<App::FatPacker::Trace>. It will
  note the current C<%INC> and will set up the output to be written to, and
  raise the compilation-only flag, which will prevent anything from being
  run past that point. This flag cannot be unset, so this is most easily run
  from the command line as such:
  
      perl -MApp::FatPacker::Trace [...]
  
  You can control the parameters to the import using an equal sign, as such:
  
      # send the parameter "hello"
      perl -MApp::FatPacker::Trace=hello [...]
  
      # send the parameter ">&STDERR"
      perl -MApp::FatPacker::Trace=>&STDERR [...]
  
  The import method accepts a first parameter telling it which output to open
  and how. These are both sent in a single parameter.
  
      # append to mytrace.txt
      perl -MApp::FatPacker::Trace=>>mytrace.txt myscript.pl
  
      # write to STDERR
      perl -MApp::FatPacker::Trace=>&STDERR myscript.pl
  
  The import method accepts additional parameters of extra modules to load.
  It will then add these modules to the trace. This is helpful if you want
  to explicitly indicate additional modules to trace, even if they aren't
  used in your script. Perhaps you're conditionally using them, perhaps
  they're for additional features, perhaps they're loaded lazily, whatever
  the reason.
  
      # Add Moo to the trace, even if you don't trace it in myscript.pl
      perl -MApp::FatPacker::Trace=>&STDERR,Moo myscript.pl
  
PERL5_APP_FATPACKER_TRACE

    $fatpacked{"perl5/CMD/Colors.pm"} =
        '#line '
      . ( 1 + __LINE__ ) . ' "'
      . __FILE__ . "\"\n"
      . <<'PERL5_CMD_COLORS';
  package CMD::Colors;
  
  =head1 NAME
  
  CMD::Colors - Generate Colorfull text on commandline
  
  =head1 SYNOPSIS
  
      use CMD::Colors;
  
      ##### Example Usage ##### 
      
      ## Prints text with 'RED' color & default background
      Cprint('hello, This is RED text', 'red');                   
  
      ## Prints text with 'RED' color & 'white' background 
      Cprint('hello, This is RED text', 'red', 'white');    
  
      ## Prints text with 'RED' color & 'default' background & BOLD text
      Cprint('hello, This is RED text', 'red', 'default', 'bold'); 
  
      ## Prints text with 'RED' color & 'default' background & 'half_bright' text
      Cprint('hello, This is RED text', 'red', undef, 'half_bright');
  
  
      ##### Show all available 'foreground' & 'background' colors - DEMO #####
      foreach my $color (keys %{$COLOR_CODES{'foreground'}}) {
       Cprint("This is $color text", $color);
       print "\n";
       foreach my $bgcolor(keys %{$COLOR_CODES{'background'}}) {
          Cprint("This is $color text with $bgcolor background", $color, $bgcolor);
          print "\n";
        }
       }
  
  
  =head1 DESCRIPTION
  
  This module provides functions for generating colorfull text on commandline with perl
  programs.  It can be used to make PERL "CMD" programs more interesting.
  
  *Cprint() function be used for all "print" calls.
  
  Syntax -
  Cprint("TEXT TO BE Printed", "ForegroundCOLORName", "BackgroundColorName", "TEXT Property");
  
  
  Supported Colors ::
  Foreground   - black, red, green, brown, blue, magenta, cyan, white
  Background   - black, red, green, brown, blue, magenta, cyan, white
  
  
  Supported Properties ::
          'bold'                 ## Set bold                                                                       
          'half_bright'          ## Set  half-bright (simulated with color on a color display)                     
          'underscore'           ## Set underscore (simulated with color on a color  display)                      
                                 ## (the  colors  used  to  simulate dim or underline are set                      
          'blink'                ## Set blink                                                                      
          'reverse_video'        ## Set reverse video                                                              
          'reset_mapping'        ## Reset selected mapping, display control flag, and  toggle                      
                                 ## meta flag (ECMA-48 says "primary font").                                       
          'null_mapping'         ## Select null mapping, set display control flag, reset                           
                                 ## toggle meta flag (ECMA-48 says "first alternate font").                        
          'null-mapping '        ## Select null mapping, set display control flag, set toggle                      
                                 ## meta  flag  (ECMA-48  says "second alternate font").  The                      
                                 ## toggle meta flag causes the high bit of a byte to be                           
                                 ## toggled before the mapping table translation is done.                          
          'nd_intensity'         ## Set normal intensity (ECMA-48 says "doubly underlined")                        
          'n_intensity'          ## Set normal intensity                                                           
          'underline_off'        ## Set underline off                                                              
          'blink_off'            ## Set blink off                                                                  
          'reverse_video_off'    ## Set reverse video off                                                          
          'default'              ## Set default        
  
  
  ** If color/property specified is not supported, default color/property would be used for printing text **
  
  Techinal Details:: 
  This module uses "Linux" console escape and control sequences for generating colorfull text 
  with background colors, It utilizes the "ECMA-48 SGR" sequenceof the SHELL to generate colored text.
  
  
  =head1 AUTHOR
         Utsav Handa <handautsav@hotmail.com>
           
           
  =head1 COPYRIGHT
         (c) 2009 Utsav Handa. 
  
          
         All rights reserved.  This program is free software; you can redistribute it 
         and/or modify it under the same terms as Perl itself.
  
             
            
  =cut
  
  
  use strict;
  use Exporter;
  
  our $VERSION   = '0.1';
  our @ISA       = qw/ Exporter /;
  our @EXPORT    = qw(Cprint %COLOR_CODES);
  
  
  
  #########################
  #### Color Code Hash ####
  #########################
  our %COLOR_CODES = (
      'foreground' => {
  	'black'                => 30,     ## Set black foreground
  	'red'                  => 31,     ## Set red foreground
  	'green'                => 32,     ## Set green foreground
  	'brown'                => 33,     ## Set brown foreground
  	'blue'                 => 34,     ## Set blue foreground
  	'magenta'              => 35,     ## Set magenta foreground
  	'cyan'                 => 36,     ## Set cyan foreground
  	'white'                => 37,     ## Set white foreground
  	'default'              => 49,     ## Set default background color
      },
      'background' => {
  	'black'                => 40,     ## Set black background
  	'red'                  => 41,     ## Set red background
  	'green'                => 42,     ## Set green background
  	'brown'                => 43,     ## Set brown background
  	'blue'                 => 44,     ## Set blue background
  	'magenta'              => 45,     ## Set magenta background
  	'cyan'                 => 46,     ## Set cyan background
  	'white'                => 47,     ## Set white background
  	'default'              => 49,     ## Set default background color
      },
      'other'      => {
  	'bold'                 => ';1',    ## Set bold
  	'half_bright'          => ';2',    ## Set  half-bright (simulated with color on a color display)
  	'underscore'           => ';4',    ## Set underscore (simulated with color on a color  display)
  	                                   ## (the  colors  used  to  simulate dim or underline are set
  	'blink'                => ';5',    ## Set blink
  	'reverse_video'        => ';7',    ## Set reverse video
  	'reset_mapping'        => ';10',   ## Reset selected mapping, display control flag, and  toggle
  	                                   ## meta flag (ECMA-48 says "primary font").
  	'null_mapping'         => ';11',   ## Select null mapping, set display control flag, reset 
                                             ## toggle meta flag (ECMA-48 says "first alternate font").
  	'null-mapping '        => ';12',   ## Select null mapping, set display control flag, set toggle
  	                                   ## meta  flag  (ECMA-48  says "second alternate font").  The
  	                                   ## toggle meta flag causes the high bit of a byte to be 
  	                                   ## toggled before the mapping table translation is done.
  	'nd_intensity'         => ';21',   ## Set normal intensity (ECMA-48 says "doubly underlined")
  	'n_intensity'          => ';22',   ## Set normal intensity
  	'underline_off'        => ';24',   ## Set underline off
  	'blink_off'            => ';25',   ## Set blink off
  	'reverse_video_off'    => ';27',   ## Set reverse video off	     
  	'default'              => '',      ## Set default
      }
  
      );
  
  
  sub Cprint {
      ## This sub-routine actually makes call to 'print' statemtn with ESC characters
      ## and prepares statemtn for printing specified text
      my ($text, $foreground_color, $background_color, $other_color, $garb) = @_;
  
      ## Default Variable(s)
      $foreground_color = 'default' if (!$foreground_color);
      $background_color = 'default' if (!$background_color);
      $other_color      = ( $other_color ? getCodeForColor($other_color, 'other') : '' );
  
      ## Building string to print
      my $string  = "\033[";
      $string    .= getCodeForColor($foreground_color, 'foreground').';'.getCodeForColor($background_color, 'background');
      $string    .= $other_color."m".$text."\033[0m";
  
      return print $string;
  }
  
  
  sub getCodeForColor {
      ## This sub-routine returns actualt ESC Code for property and color specified
      my ($color, $type, $garb) = @_;
  
      ## Default Type
      $type  = 'foreground' if (!$type);
  
      ## Sanitize Arguments
      $color = lc $color;
      $type  = lc $type;
  
  
      return ( $COLOR_CODES{$type}{$color} ? $COLOR_CODES{$type}{$color} : $COLOR_CODES{$type}{'default'} );
  }
  
  
  
  
  
PERL5_CMD_COLORS

    $fatpacked{"perl5/Modern/Perl.pm"} =
        '#line '
      . ( 1 + __LINE__ ) . ' "'
      . __FILE__ . "\"\n"
      . <<'PERL5_MODERN_PERL';
  package Modern::Perl;
  # ABSTRACT: enable all of the features of Modern Perl with one import
  $Modern::Perl::VERSION = '1.20230106';
  use 5.010_000;
  
  use strict;
  use warnings;
  
  use mro     ();
  use feature ();
  
  # enable methods on filehandles; unnecessary when 5.14 autoloads them
  use IO::File   ();
  use IO::Handle ();
  
  my $wanted_date;
  
  sub VERSION {
      my ($self, $version) = @_;
  
      my $default = 2023;
  
      return $Modern::Perl::VERSION || $default unless defined $version;
      return $Modern::Perl::VERSION || $default if             $version < 2009;
  
      $wanted_date = $version if (caller(1))[3] =~ /::BEGIN/;
      return $default;
  }
  
  sub import {
      my ($class, $date) = @_;
      $date = $wanted_date unless defined $date;
  
      my $feature_tag    = validate_date( $date );
      undef $wanted_date;
  
      warnings->import;
      strict->import;
      feature->unimport( ':all' );
      feature->import( $feature_tag );
  
      if ($feature_tag ge ':5.34') {
          feature->import( 'signatures' );
          warnings->unimport( 'experimental::signatures' );
      }
  
      mro::set_mro( scalar caller(), 'c3' );
  }
  
  sub unimport {
      warnings->unimport;
      strict->unimport;
      feature->unimport;
  }
  
  sub validate_date {
      my %dates = (
          2009 => ':5.10',
          2010 => ':5.10',
          2011 => ':5.12',
          2012 => ':5.14',
          2013 => ':5.16',
          2014 => ':5.18',
          2015 => ':5.20',
          2016 => ':5.24',
          2017 => ':5.24',
          2018 => ':5.26',
          2019 => ':5.28',
          2020 => ':5.30',
          2021 => ':5.32',
          2022 => ':5.34',
          2023 => ':5.36',
      );
  
      my $date = shift;
  
      # always enable unicode_strings when available
      unless ($date) {
          return ':5.12' if $] > 5.011003;
          return ':5.10';
      }
  
      my $year = substr $date, 0, 4;
      return $dates{$year} if exists $dates{$year};
  
      die "Unknown date '$date' requested\n";
  }
  
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  Modern::Perl - enable all of the features of Modern Perl with one import
  
  =head1 VERSION
  
  version 1.20230106
  
  =head1 SYNOPSIS
  
  Modern Perl programs use several modules to enable additional features of Perl
  and of the CPAN.  Instead of copying and pasting all of these C<use> lines,
  instead write only one:
  
      use Modern::Perl;
  
  This enables the L<strict> and L<warnings> pragmas, as well as all of the
  features available in Perl 5.10. It also enables C3 method resolution order as
  documented in C<perldoc mro> and loads L<IO::File> and L<IO::Handle> so that
  you may call methods on filehandles. In the future, it may include additional
  core modules and pragmas (but is unlikely to include non-core features).
  
  Because so much of this module's behavior uses lexically scoped pragmas, you
  may disable these pragmas within an inner scope with:
  
      no Modern::Perl;
  
  See L<http://www.modernperlbooks.com/mt/2009/01/toward-a-modernperl.html> for
  more information, L<http://www.modernperlbooks.com/> for further discussion of
  Modern Perl and its implications, and
  L<http://onyxneon.com/books/modern_perl/index.html> for a freely-downloadable
  Modern Perl tutorial.
  
  =head2 CLI Usage
  
  As of Modern::Perl 2019, you may also enable this pragma from the command line:
  
      $ perl -Modern::Perl -e 'say "Take that, awk!"'
  
  You may also enable year-specific features:
  
      $ perl -Modern::Perl=2020 -e 'say "Looking forward to Perl 5.30!"'
  
  =head2 Wrapping Modern::Perl
  
  If you want to wrap Modern::Perl in your own C<import()> method, you can do so
  to add additional pragmas or features, such as the use of L<Try::Tiny>. Please
  note that, if you do so, you will I<not> automatically enable C3 method
  resolution in the calling scope. This is due to how the L<mro> pragma works. In
  your custom C<import()> method, you will need to write code such as:
  
      mro::set_mro( scalar caller(), 'c3' );
  
  =head2 Forward Compatibility
  
  For forward compatibility, I recommend you specify a string containing a
  I<year> value as the single optional import tag. For example:
  
      use Modern::Perl '2009';
      use Modern::Perl '2010';
  
  ... both enable 5.10 features, while:
  
      use Modern::Perl '2011';
  
  ... enables 5.12 features:
  
      use Modern::Perl '2012';
  
  ... enables 5.14 features:
  
      use Modern::Perl '2013';
  
  ... enables 5.16 features, and:
  
      use Modern::Perl '2014';
  
  ... enables 5.18 features, and:
  
      use Modern::Perl '2015';
  
  ... enables 5.20 features, and:
  
      use Modern::Perl '2016';
  
  ... enables 5.24 features, and:
  
      use Modern::Perl '2017';
  
  ... enables 5.24 features, and:
  
      use Modern::Perl '2018';
  
  ... enables 5.26 features.
  
      use Modern::Perl '2019';
  
  ... enables 5.28 features.
  
      use Modern::Perl '2020';
  
  ... enables 5.30 features.
  
      use Modern::Perl '2021';
  
  ... enables 5.32 features.
  
      use Modern::Perl '2022';
  
  ... enables 5.34 features.
  
      use Modern::Perl '2023';
  
  ... enables 5.36 features.
  
  Obviously you cannot use newer features on earlier
  versions. Perl will throw the appropriate exception if you try.
  
  =head1 AUTHOR
  
  chromatic, C<< <chromatic at wgz.org> >>
  
  =head1 BUGS
  
  None known.
  
  Please report any bugs or feature requests to C<bug-modern-perl at
  rt.cpan.org>, or through the web interface at
  L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Modern-Perl>.  I will be
  notified, and then you'll automatically be notified of progress on your bug as
  I make changes.
  
  =head1 SUPPORT
  
  You can find documentation for this module with the perldoc command.
  
      perldoc Modern::Perl
  
  You can also look for information at:
  
  =over 4
  
  =item * RT: CPAN's request tracker
  
  L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Modern-Perl>
  
  =item * AnnoCPAN: Annotated CPAN documentation
  
  L<http://annocpan.org/dist/Modern-Perl>
  
  =item * CPAN Ratings
  
  L<http://cpanratings.perl.org/d/Modern-Perl>
  
  =item * Search CPAN
  
  L<http://search.cpan.org/dist/Modern-Perl/>
  
  =back
  
  =head1 ACKNOWLEDGEMENTS
  
  Damian Conway (inspiration from L<Toolkit>), Florian Ragwitz
  (L<B::Hooks::Parser>, so I didn't have to write it myself), chocolateboy (for
  suggesting that I don't even need L<B::Hooks::Parser>), Damien Learns Perl,
  David Moreno, Evan Carroll, Elliot Shank, Andreas König, Father Chrysostomos,
  Gryphon Shafer, and Norbert E. Grüner for reporting bugs, filing patches, and
  requesting features.
  
  =head1 AUTHOR
  
  chromatic
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2018 by chromatic@wgz.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
PERL5_MODERN_PERL

    $fatpacked{"perl5/odern/Perl.pm"} =
        '#line '
      . ( 1 + __LINE__ ) . ' "'
      . __FILE__ . "\"\n"
      . <<'PERL5_ODERN_PERL';
  package odern::Perl;
  #ABSTRACT: Module for enabling all of the features of Modern Perl
  $odern::Perl::VERSION = '1.20230106';
  use Modern::Perl;
  
  *import = \&Modern::Perl::import;
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  odern::Perl - Module for enabling all of the features of Modern Perl
  
  =head1 VERSION
  
  version 1.20230106
  
  =head1 AUTHOR
  
  chromatic
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2018 by chromatic@wgz.org.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
PERL5_ODERN_PERL

    s/^  //mg for values %fatpacked;

    my $class = 'FatPacked::' . ( 0 + \%fatpacked );
    no strict 'refs';
    *{"${class}::files"} = sub { keys %{ $_[0] } };

    if ( $] < 5.008 ) {
        *{"${class}::INC"} = sub {
            if ( my $fat = $_[0]{ $_[1] } ) {
                my $pos  = 0;
                my $last = length $fat;
                return (
                    sub {
                        return 0 if $pos == $last;
                        my $next = ( 1 + index $fat, "\n", $pos ) || $last;
                        $_ .= substr $fat, $pos, $next - $pos;
                        $pos = $next;
                        return 1;
                    }
                );
            }
        };
    }

    else {
        *{"${class}::INC"} = sub {
            if ( my $fat = $_[0]{ $_[1] } ) {
                open my $fh, '<', \$fat
                  or die
"FatPacker error loading $_[1] (could be a perl installation issue?)";
                return $fh;
            }
            return;
        };
    }

    unshift @INC, bless \%fatpacked, $class;
}    # END OF FATPACK CODE

use FindBin;
use lib "$FindBin::Bin/lib/perl5";

use Modern::Perl '2013';

use CMD::Colors;

my $name = "Greg";

Cprint( "hello $name, This is RED text\n",   "red" );
Cprint( "hello $name, This is GREEN text\n", "green" );

my $crazy = "
this is my crazy
multi
line
var
that i will use
";

print $crazy;

# opendir my $dir, "/usr/bin" or die "cannot open directory: $!";
my @files = glob('/usr/bin/s*');

# closedir $dir;

map { print "found s* bin: $_\n" } @files;
